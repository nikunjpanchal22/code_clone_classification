# -*- coding: utf-8 -*-
"""tabpfn_model_impl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ORUTotHMXhr4sJpVj20Tnxdv-752Nfoc
"""

!pip install TabPFN
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score
from tabpfn import TabPFNClassifier
import torch
import sys

print('Python %s on %s' % (sys.version, sys.platform))
print(f'CUDA Available: {torch.cuda.is_available()}')
if torch.cuda.is_available():
    print(f'GPU Device: {torch.cuda.get_device_name(0)}')

df = pd.read_csv('combined_py_dfs.csv')

# Step 1: Preprocessing
df = df.dropna()

# Step 2: Encode the target variable (assuming 'clone_type' is the target)
le = LabelEncoder()
df['clone_type_encoded'] = le.fit_transform(df['clone_type'])

# Step 3: Select only the specified 13 features
numerical_features = [
    'Cosine TF-IDF Similarity', 'CodeBERT Semantic Similarity', 'CodeT5 Semantic Similarity',
    'Node Overlap Similarity', 'Edge Overlap Similarity', 'CFG Similarity', 'Data Flow Similarity',
    'CodeBLEU Score', 'Weisfeiler-Lehman Similarity', 'Jaro-Winkler Similarity', 'Rabin Karp Similarity',
    'NCD Similarity', 'MinHash Similarity', 'N-gram Token Similarity'
]
X = df[numerical_features].values
y = df['clone_type_encoded'].values

# Step 4: Scale the features
scaler = MinMaxScaler()  # Alternative: StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 5: Split the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 6: Initialize TabPFN model
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f'Using device: {device}')
model = TabPFNClassifier(device=device)

if len(X_train) > 10000:
    print(f"Subsampling to 10000 samples from {len(X_train)}")
    indices = np.random.choice(len(X_train), 1000, replace=False)
    X_train_subset = X_train[indices]
    y_train_subset = y_train[indices]
    model.fit(X_train_subset, y_train_subset)
else:
    model.fit(X_train, y_train)

# Step 8: Evaluate on test set
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Test Accuracy: {accuracy:.4f}')

